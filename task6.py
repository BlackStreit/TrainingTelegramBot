
#–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏
import os
import logging
import asyncio
import aiohttp
import signal
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BotCommand
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import traceback

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv(".env")
TOKEN = os.getenv("BOT_TOKEN")  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
LOGPATH = os.getenv("LOG_PATH")  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
if not TOKEN:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
if not LOGPATH:
    raise ValueError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è LOG_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Å–æ–±—ã—Ç–∏–π –≤ —Ñ–∞–π–ª –ª–æ–≥–æ–≤
logging.basicConfig(filename=LOGPATH, level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å –∑–∞–¥–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(token=TOKEN)
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º MemoryStorage
dp = Dispatcher(storage=MemoryStorage())

inline_kb = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç", url="https://example.com")],
    [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="more_info")]
])

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
        BotCommand(command="info", description="–í–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ—Ä–µ"),  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ—Ä–µ
        BotCommand(command="random_pic", description="–ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É 800 –Ω–∞ 600"),
        BotCommand(command="currency", description="–£–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–ª–∞—Ä–∞")
    ]
    await bot.set_my_commands(commands)  # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –±–æ—Ç–µ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /random_pic - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
@dp.message(Command("random_pic"))
async def random_pic(message: Message):
    url = "https://picsum.photos/800/600"  # URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    
    try:
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é HTTP-—Å–µ—Å—Å–∏—é
        async with aiohttp.ClientSession() as session:
            async with session.get(url, timeout=10) as response:  # –í—ã–ø–æ–ª–Ω—è–µ–º GET-–∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                if response.status == 200:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø–æ–¥–ø–∏—Å—å—é
                    await message.answer_photo(str(response.url), caption="üé≤ –°–ª—É—á–∞–π–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        await message.answer("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

# URL API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç
CURRENCY_API_URL = "https://api.exchangerate-api.com/v4/latest/"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /currency - –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –¥–≤–µ –≤–∞–ª—é—Ç—ã
@dp.message(Command("currency"))
async def currency_rate(message: Message):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="USD", callback_data="currency_USD"),
         InlineKeyboardButton(text="EUR", callback_data="currency_EUR"),
         InlineKeyboardButton(text="RUB", callback_data="currency_RUB")],
        [InlineKeyboardButton(text="GBP", callback_data="currency_GBP"),
         InlineKeyboardButton(text="JPY", callback_data="currency_JPY"),
         InlineKeyboardButton(text="AUD", callback_data="currency_AUD")]
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–≤—É—é –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_currency_selection = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–≤–æ–π –≤–∞–ª—é—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("currency_"))
async def select_first_currency(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    base_currency = callback_query.data.split("_")[1]
    user_currency_selection[user_id] = {"base": base_currency}
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="USD", callback_data=f"target_{base_currency}_USD"),
         InlineKeyboardButton(text="EUR", callback_data=f"target_{base_currency}_EUR"),
         InlineKeyboardButton(text="RUB", callback_data=f"target_{base_currency}_RUB")],
        [InlineKeyboardButton(text="GBP", callback_data=f"target_{base_currency}_GBP"),
         InlineKeyboardButton(text="JPY", callback_data=f"target_{base_currency}_JPY"),
         InlineKeyboardButton(text="AUD", callback_data=f"target_{base_currency}_AUD")]
    ])
    
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ç–æ—Ä—É—é –≤–∞–ª—é—Ç—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ç–æ—Ä–æ–π –≤–∞–ª—é—Ç—ã –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞
@dp.callback_query(lambda c: c.data.startswith("target_"))
async def process_currency_callback(callback_query: types.CallbackQuery):
    _, base_currency, target_currency = callback_query.data.split("_")
    
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"{CURRENCY_API_URL}{base_currency}", timeout=10) as response:
                if response.status == 200:
                    data = await response.json()
                    rate = data["rates"].get(target_currency)
                    if rate:
                        await callback_query.message.answer(f"üí∞ –ö—É—Ä—Å {base_currency} ‚Üí {target_currency}: {rate}")
                    else:
                        await callback_query.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç.")
                else:
                    await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞.")
    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    except asyncio.TimeoutError:
        logger.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.")
        await callback_query.message.answer("‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")
    except Exception as e:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
@dp.message(Command("start"))
async def start(message: Message):
    text = """*–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!*
_–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!_"""  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown
    await message.answer("–ü–æ–ª—É—á–∞—é –¥–∞–Ω–Ω—ã–µ...")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–º–∞–Ω–¥—ã
    await asyncio.sleep(1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    await message.answer(text, parse_mode=ParseMode.MARKDOWN, reply_markup=inline_kb)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /info - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message(Command("info"))
async def info(message: Message):
    text = """<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n
<i>/start</i> - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n
<i>/info</i> - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–∞—Ö\n
<i>/random_pic</i> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
"""
    await message.answer(text, parse_mode=ParseMode.HTML)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML

@dp.callback_query(lambda c: c.data == "more_info")
async def process_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.answer("–í–æ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è!")

async def wait_for_exit(stop_event):
    """–û–∂–∏–¥–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ —á–µ—Ä–µ–∑ Ctrl+C (–¥–ª—è Windows)."""
    try:
        while not stop_event.is_set():
            await asyncio.sleep(1)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –≤—ã–∫–ª—é—á–∞—é—Å—å...")
        stop_event.set()

# –û—Å–Ω–æ–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
async def main():
    await set_commands(bot)
    print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info("–ë–æ—Ç –≤–∫–ª—é—á–∞–µ—Ç—Å—è")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞
    await dp.start_polling(bot, shutdown_timeout=5)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞, –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == '__main__':
    try:
        asyncio.run(main())  # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –±–æ—Ç–∞
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")  # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ —Å–ª—É—á–∞–µ —Å–±–æ—è
        print(f"–û—à–∏–±–∫–∞: {e}")  # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å
		
